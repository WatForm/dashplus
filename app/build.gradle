/*
 * This file was generated by the Gradle 'init' task.
 * This generated file contains a sample Java application project to get you started. For more details on building Java & JVM projects, please refer to https://docs.gradle.org/9.1.0/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
	// eclipse is used for nvim's jdtls to find the classpath
	id 'java'
    id 'application'
	id 'antlr'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
	flatDir {
		dirs 'libs'
	}
}

dependencies {
    // JUnit 5
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'

    // This dependency is used by the application.
    implementation libs.guava

	// Alloy Jar
	implementation fileTree(dir: 'libs', include: ['*.jar'])//name: 'org.alloytools.alloy.dist'

	// Antlr
	antlr "org.antlr:antlr4:4.13.2"
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(25)
    }
}

application {
    mainClass = 'ca.uwaterloo.watform.Main'
}

jar {
    manifest {
        attributes(
                'Main-Class': application.mainClass
        )
    }

    // uber-jar
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// for jdtls, gradle doesn't need this to compile
sourceSets {
    main {
        java {
            srcDirs += "$buildDir/generated-src/antlr/main"
        }
    }
}


// These paths are not used in build.gradle. If you want to create a gradle task to set up catalyst-corpus, use these.
// See app/src/test/resources/antlr/catalyst/download-corpus.sh. 
def corpusUrl = "https://github.com/WatForm/dashplus/releases/download/catalyst-corpus-v1/catalyst-corpus.zip"
def corpusZip = file("src/test/resources/antlr/catalyst/catalyst-corpus.zip")
def corpusParentDir = file("src/test/resources/antlr/catalyst/")
def corpusDir = file("src/test/resources/antlr/catalyst/catalyst-corpus")

tasks.named('generateGrammarSource') {
    outputDirectory = file("$buildDir/generated-src/antlr/main/antlr/generated")
    arguments += ["-visitor", "-no-listener"]
}

tasks.named('compileJava') {
    dependsOn tasks.named('generateGrammarSource')
}

tasks.named("processTestResources") {
    dependsOn tasks.named('generateGrammarSource')

    doFirst {
        println "processTestResources: This may take a while the first time catalyst-corpus is being processed."
    }
}

tasks.named('test') {
    dependsOn tasks.named('generateGrammarSource')
    
    useJUnitPlatform()
    
    testLogging {
        showStandardStreams = true
    }

    if (project.hasProperty('stopOnFirstFail')) {
        systemProperty 'stopOnFirstFail', project.property('stopOnFirstFail').toString()
    }
}


// so build doesn't depend on test
tasks.named("check") {
    dependsOn.removeIf { it.name == "test" }
}

